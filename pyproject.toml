[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "django-blog"
version = "1.0.0"
description = "A professional Django blog application"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Django Blog Team", email = "team@djangoblog.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
dependencies = [
    "Django>=5.2.5",
    "Pillow>=11.3.0",
    "python-decouple>=3.8",
]
requires-python = ">=3.10"

[project.optional-dependencies]
dev = [
    "pytest-django>=4.11.1",
    "coverage>=7.10.5",
    "black>=24.10.0",
    "isort>=5.13.2",
    "ruff>=0.9.7",
    "mypy>=1.13.0",
    "django-stubs[compatible-mypy]>=5.1.0",
    "bandit>=1.8.0",
    "pydocstyle>=6.3.0",
    "pre-commit>=4.3.0",
]

[project.urls]
Homepage = "https://github.com/example/django-blog"
Repository = "https://github.com/example/django-blog.git"
Issues = "https://github.com/example/django-blog/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "myproject*"]
exclude = ["tests*", "venv*", "env*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | env
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "venv/*", "env/*"]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "env",
    "migrations",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "django.*",
    "*.migrations.*",
]
ignore_errors = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations", "venv", "env"]
skips = ["B101", "B601"]

# Pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add_ignore = "D100,D101,D102,D103,D104,D105,D106,D107"
match_dir = "^(?!(migrations|venv|env|tests)).*"

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
    "manage.py",
    "*/settings/*",
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

# Pytest configuration
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "myproject.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
testpaths = [".", "core"]
addopts = "--verbose --tb=short --strict-markers --reuse-db"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "functional: marks tests as functional tests",
]
